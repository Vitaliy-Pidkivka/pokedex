{"version":3,"sources":["utils/helpers.js","utils/api.js","hooks/usePokemonList.js","hooks/usePokemonDetails.js","components/PokemonPreview.jsx","components/PokemonDetails.jsx","App.jsx","index.js"],"names":["createKey","base","args","reduce","result","item","axios","defaults","baseURL","fetchPokemon","data","url","get","usePokemonList","useState","pokemonList","setPokemonList","page","setPage","fetchPokemonList","a","params","offset","limit","results","useEffect","setNextPage","usePokemonDetails","pokemon","setPokemon","fetchPokemonDetails","useStyles","makeStyles","theme","margin","cursor","background","transition","backgroundColor","height","padding","GreenButton","withStyles","root","color","palette","getContrastText","green","Button","GreenLightButton","RedButton","red","BlueButton","blue","PurpleLightButton","purple","PokemonPreview","filter","name","setFilter","classes","pokemonDetails","sprites","types","front_default","typesList","map","type","includes","setPokemonDetails","TableRow","className","TableCell","alt","onClick","src","align","index","variant","key","width","boxShadow","content","picture","textAlign","fontSize","fontWeight","textTransform","pos","marginBottom","boldFont","infoWrapper","display","justifyContent","borderBottom","PokemonDetails","weight","base_experience","Card","CardContent","Typography","component","gutterBottom","tableContainer","maxHeight","table","tableHeader","moreBtn","position","bottom","left","transform","App","collection","hasOwnProperty","length","Object","keys","isEmpty","TableContainer","Paper","Table","stickyHeader","aria-label","TableHead","TableBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29b87364.chunk.js","sourcesContent":["/** can be used for generation of key props for elements rendered on loop */\nexport const createKey = (base = '', ...args) => (\n  args.reduce((result, item) => `${result}-${item}`, base)\n)\n\n/** can be used for instances of Array, Object and String */\nexport const isEmpty = (collection = []) => (\n  !(collection.hasOwnProperty('length')\n    ? collection.length\n    : Object.keys(collection).length)\n)","import axios from 'axios'\n\naxios.defaults.baseURL = 'https://pokeapi.co/api/v2/pokemon'\n\nexport const fetchPokemon = ({ data, url = '/' }) => axios.get(url, data)","import { useState, useEffect } from 'react'\n\nimport { fetchPokemon } from '../utils/api'\n\nconst LIMIT = 12\n\nconst usePokemonList = () => {\n  const [pokemonList, setPokemonList] = useState([])\n  const [page, setPage] = useState(0)\n\n  const setNextPage = () => setPage(page + 1)\n\n  const fetchPokemonList = async () => {\n    const params = {\n      offset: page * LIMIT,\n      limit: LIMIT,\n    }\n    const { data } = await fetchPokemon({ data: { params } })\n    setPokemonList([...pokemonList, ...data.results])\n  }\n\n  useEffect(() => {\n    fetchPokemonList()\n  }, [page])\n\n  return { pokemonList, setNextPage }\n}\n\nexport default usePokemonList","import { useState, useEffect } from 'react'\n\nimport { fetchPokemon } from '../utils/api'\n\nconst usePokemonDetails = (url) => {\n  const [pokemon, setPokemon] = useState({})\n\n  const fetchPokemonDetails = async () => {\n    const { data } = await fetchPokemon({ url })\n    setPokemon(data)\n  }\n  useEffect(() => {\n    fetchPokemonDetails()\n  }, [])\n\n  return pokemon\n}\n\nexport default usePokemonDetails","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport {withStyles} from '@material-ui/core/styles';\nimport {green, purple, red, blue} from '@material-ui/core/colors';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport {createKey} from '../utils/helpers'\nimport usePokemonDetails from '../hooks/usePokemonDetails'\nimport {makeStyles} from \"@material-ui/styles\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: '0 0 5px 10px',\n    },\n    cursor: {\n        cursor: 'pointer',\n    },\n    background:{\n        transition: 'all .3s ease',\n        '&:hover': {\n            backgroundColor: '#cadde3',\n        },\n    },\n    height: {\n        height: 63\n    },\n    padding: {\n        padding: 5,\n    }\n}));\n\n\n\nconst GreenButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(green[500]),\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n    },\n}))(Button);\nconst GreenLightButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(green[300]),\n        backgroundColor: green[300],\n        '&:hover': {\n            backgroundColor: green[500],\n        },\n    },\n}))(Button);\n\nconst RedButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(red[500]),\n        backgroundColor: red[500],\n        '&:hover': {\n            backgroundColor: red[700],\n        },\n    },\n}))(Button);\n\nconst BlueButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(blue[500]),\n        backgroundColor: blue[500],\n        '&:hover': {\n            backgroundColor: blue[700],\n        },\n    },\n}))(Button);\nconst PurpleLightButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(purple[300]),\n        backgroundColor: purple[300],\n        '&:hover': {\n            backgroundColor: purple[500],\n        },\n    },\n}))(Button);\n\nconst PokemonPreview = ({filter, name, setFilter, setPokemon}) => {\n\n    const classes = useStyles()\n    const pokemonDetails = usePokemonDetails(name)\n    const {sprites = {}, types = []} = pokemonDetails\n    const {front_default = ''} = sprites\n\n    const typesList = types.map(({type}) => type.name)\n    if (filter && !typesList.includes(filter)) return null\n\n    const setPokemonDetails = () => setPokemon(pokemonDetails)\n\n    return (\n\n        <TableRow className={classes.background}>\n            <TableCell className={classes.padding}>\n                <img\n                    className={`${classes.cursor} ${classes.height} `}\n                    alt={name}\n                    onClick={setPokemonDetails}\n                    src={front_default}\n                />\n            </TableCell>\n            <TableCell align='right'>\n                <div onClick={setPokemonDetails}\n                     className={`${classes.cursor} ${classes.padding}`}\n                >\n                    {name}\n                </div>\n            </TableCell>\n            <TableCell align='right'\n                       className={`${classes.padding}`}\n            >\n                {typesList.map((type, index) => {\n                    if (type === 'grass') {\n                        return (\n                            <GreenButton\n                                className={classes.margin}\n                                variant='contained'\n                                key={createKey(type, index)}\n                                onClick={() => {\n                                    const filterToSet = type === filter\n                                        ? ''\n                                        : type\n                                    setFilter(filterToSet)\n                                }}\n                            >\n                                {type}\n                            </GreenButton>)\n                    }\n                    if (type === 'water') {\n                        return (\n                            <BlueButton\n                                className={classes.margin}\n                                variant='contained'\n                                key={createKey(type, index)}\n                                onClick={() => {\n                                    const filterToSet = type === filter\n                                        ? ''\n                                        : type\n                                    setFilter(filterToSet)\n                                }}\n                            >\n                                {type}\n                            </BlueButton>)\n                    }\n\n                    if (type === 'fire') {\n                        return (\n                            <RedButton\n                                className={classes.margin}\n                                variant='contained'\n                                key={createKey(type, index)}\n                                onClick={() => {\n                                    const filterToSet = type === filter\n                                        ? ''\n                                        : type\n                                    setFilter(filterToSet)\n                                }}\n                            >\n                                {type}\n                            </RedButton>)\n                    }\n                    if (type === 'poison') {\n                        return (\n                            <GreenLightButton\n                                className={classes.margin}\n                                variant='contained'\n                                key={createKey(type, index)}\n                                onClick={() => {\n                                    const filterToSet = type === filter\n                                        ? ''\n                                        : type\n                                    setFilter(filterToSet)\n                                }}\n                            >\n                                {type}\n                            </GreenLightButton>)\n                    }\n                    if (type === 'flying') {\n                        return (\n                            <PurpleLightButton\n                                className={classes.margin}\n                                variant='contained'\n                                key={createKey(type, index)}\n                                onClick={() => {\n                                    const filterToSet = type === filter\n                                        ? ''\n                                        : type\n                                    setFilter(filterToSet)\n                                }}\n                            >\n                                {type}\n                            </PurpleLightButton>)\n                    }\n\n                    return (\n                        <Button\n                            className={classes.margin}\n                            color='primary'\n                            key={createKey(type, index)}\n                            onClick={() => {\n                                const filterToSet = type === filter\n                                    ? ''\n                                    : type\n                                setFilter(filterToSet)\n                            }}\n                            variant='contained'\n                        >\n                            {type}\n                        </Button>\n                    )\n                })}\n            </TableCell>\n        </TableRow>\n    )\n}\n\nexport default PokemonPreview","import React from 'react'\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {makeStyles} from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: 300,\n        margin: '15px auto 15px',\n        boxShadow: '0 0 10px gray',\n\n    },\n    content: {\n        padding: 10\n    },\n    picture: {\n        textAlign: 'center',\n        height: '80px'\n    },\n    name: {\n        fontSize: 24,\n        fontWeight: 900,\n        textTransform: 'uppercase',\n        textAlign: 'center',\n    },\n    pos: {\n        marginBottom: 14,\n    },\n    boldFont: {\n        fontWeight: 'bold',\n    } ,\n    infoWrapper: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        borderBottom: '1px solid gray',\n    },\n});\nconst PokemonDetails = ({pokemon}) => {\n    const classes = useStyles()\n    const {name, sprites = {}, types = [], weight, height,base_experience} = pokemon\n    const {front_default = ''} = sprites\n    return (\n        <div>\n            <Card className={classes.root} variant=\"outlined\">\n                <CardContent className={classes.content}>\n                    <Typography color=\"textSecondary\"\n                                className={classes.picture}\n                                component='div'\n                                gutterBottom>\n                        <img alt={name} src={front_default}/>\n                    </Typography>\n                    <Typography variant=\"h5\"\n                                component=\"h1\"\n                                className={`${classes.name} ${classes.pos}`}\n                    >\n                        {name}\n                    </Typography>\n                    <Typography color=\"textSecondary\"\n                                className={classes.infoWrapper}\n                    >\n                        <span className={classes.boldFont}>Weight: </span><span>{weight}</span>\n                    </Typography>\n                    <Typography color=\"textSecondary\"\n                                className={classes.infoWrapper}\n                    >\n                        <span className={classes.boldFont}>Height: </span><span>{height}</span>\n                    </Typography>\n                    <Typography color=\"textSecondary\"\n                                className={classes.infoWrapper}\n                    >\n                        <span className={classes.boldFont}>Base experience: </span><span>{base_experience}</span>\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n\n    )\n}\n\nexport default PokemonDetails","import React, {useState} from 'react'\nimport Button from '@material-ui/core/Button'\nimport Table from '@material-ui/core/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport {createKey, isEmpty} from './utils/helpers'\nimport usePokemonList from './hooks/usePokemonList'\nimport PokemonPreview from './components/PokemonPreview'\nimport PokemonDetails from './components/PokemonDetails'\nimport {makeStyles} from \"@material-ui/styles\";\nimport {Paper} from \"@material-ui/core\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nconst useStyles = makeStyles({\n    tableContainer: {\n        maxHeight: 462,\n    },\n    table: {},\n    tableHeader: {},\n    moreBtn: {\n        position: 'fixed',\n        bottom: '15px',\n        left: '50%',\n        transform: 'translate(-50%, 0)'\n    }\n});\n\nconst App = ({}) => {\n    const classes = useStyles();\n    const [pokemon, setPokemon] = useState({})\n    const [filter, setFilter] = useState('')\n    const {pokemonList, setNextPage} = usePokemonList()\n\n    return (\n        <div>\n            {!isEmpty(pokemon) && (\n                <PokemonDetails pokemon={pokemon}/>\n            )}\n            <TableContainer component={Paper}\n                            className={classes.tableContainer}\n            >\n                <Table className={classes.table} stickyHeader aria-label=\"sticky table\">\n                    <TableHead className={classes.tableHeader}>\n                        <TableRow>\n                            <TableCell>Visual</TableCell>\n                            <TableCell align=\"right\">Name</TableCell>\n                            <TableCell align=\"right\">Types-filter</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {pokemonList.map(({name}, index) => (\n                            <PokemonPreview\n                                key={createKey(name, index)}\n                                {...{filter, name, setFilter, setPokemon}}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Button\n                className={classes.moreBtn}\n                color='primary'\n                variant='contained'\n                onClick={setNextPage}\n            >\n                Load more\n            </Button>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}